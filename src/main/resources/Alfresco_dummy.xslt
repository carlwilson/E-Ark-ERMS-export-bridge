<xsl:stylesheet version="1.0"
		xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
		xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"
		xmlns:md2="http://docs.oasis-open.org/ns/cmis/core/200908/"
		xmlns:md1="http://docs.oasis-open.org/ns/cmis/messaging/200908/"
		xmlns="http://ead3.archivists.org/schema/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://ead3.archivists.org/schema/  ../../schemas/ead3.xsd"
		exclude-result-prefixes="md1 md2 soap">

	<xsl:output method="xml" indent="yes" encoding="utf-8"/>

	<xsl:template match="/">
		<ead xmlns="http://ead3.archivists.org/schema/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://ead3.archivists.org/schema/  ../../schemas/ead3.xsd">
			<!--A required child element of <ead> for recording bibliographic and administrative information about an EAD instance.-->
			<control>
				<!--Record Identifier. A required child element of <control> that designates a unique identifier for the EAD instance.-->
				<!--Has to be generated by the Export Module.-->
				<recordid>UUID</recordid>
				<filedesc>
					<!--Title Statement. A required child element of <filedesc> that binds together information about the name of an encoded finding aid and those responsible for its content.-->
					<!-- The name of the data provider should come from the repository profile view of the Export Module as each repository is related to some agency/data provider.-->
					<titlestmt>
						<titleproper>Name of the data provider</titleproper>
					</titlestmt>
					<!--Note Statement. A child element of notestmt, used to provide a general note related to the EAD instance.-->
					<!--This is a static text saying that this EAD file is E-ARK compliant.-->
					<notestmt>
						<controlnote>
							<p>This EAD file is compliant with the E-ARK project ERMS SMURF Specification, Version 1.0.</p>
						</controlnote>
					</notestmt>
				</filedesc>
				<!--A required child element of <control> that records the current version status of the EAD instance.-->
				<!--Maintenancestatus should be always considered as "new".-->
				<maintenancestatus value="new"/>
				<maintenanceagency>
					<!--Repeat the information from <titleproper>-->
					<agencyname>Name of the data provider</agencyname>
				</maintenanceagency>
				<maintenancehistory>
					<maintenanceevent>
						<eventtype value="created"/>
						<!--Always created.-->
						<eventdatetime>Datetime</eventdatetime>
						<!--Time of the creation in datetime format.-->
						<agenttype value="machine"/>
						<!--Always machine.-->
						<agent>Export Module</agent>
						<!--Always Export Module.-->
					</maintenanceevent>
				</maintenancehistory>
			</control>

			<!--Archival Description. A required child element of <ead> that binds together all of the archival descriptive information in an EAD instance.-->
			<archdesc level="fonds">
				<!--Always fonds.-->
				<did>
					<origination label="Creator">
						<!--Always "Creator".-->
						<name>
							<part>Name of the data provider/creator</part>
							<!--Same as <titleproper>.-->
						</name>
					</origination>
				</did>

				<!--From this point forward EAD elements are based on ERMS metadata elements.-->

				<!--Map following metadata if the SOAP contains aggregations and classes. Aggregation c-level values can be "series", "subseries" or "file" for the DELTA system. Classes should be represented as file plans. Document's c-level value is "item".-->
				<xsl:if test="soap:Envelope/soap:Body/md1:getPropertiesResponse/md1:properties/md2:propertyId[@propertyDefinitionId='cmis:objectTypeId']/md2:value='cmis:series'">
					<!--Metadata elements mapping for series (<c level="series">)-->
					<xsl:apply-templates select="soap:Envelope/soap:Body/md1:getPropertiesResponse" mode="series" />
				</xsl:if>
				<xsl:if test="soap:Envelope/soap:Body/md1:getPropertiesResponse/md1:properties/md2:propertyId[@propertyDefinitionId='cmis:objectTypeId']/md2:value='cmis:subseries'">
					<!--Metadata elements mapping for subseries (<c level="subseries">)-->
					<xsl:apply-templates select="soap:Envelope/soap:Body/md1:getPropertiesResponse" mode="series" />
				</xsl:if>
				<xsl:if test="soap:Envelope/soap:Body/md1:getPropertiesResponse/md1:properties/md2:propertyId[@propertyDefinitionId='cmis:objectTypeId']/md2:value='cmis:volume'">
					<!--Metadata elements mapping for volumes (<c level="file">)-->
					<xsl:apply-templates select="soap:Envelope/soap:Body/md1:getPropertiesResponse" mode="case" />
				</xsl:if>
				<xsl:if test="soap:Envelope/soap:Body/md1:getPropertiesResponse/md1:properties/md2:propertyId[@propertyDefinitionId='cmis:objectTypeId']/md2:value='cmis:cmis:case'">
					<!--Metadata elements mapping for cases (<c level="file">)-->
					<xsl:apply-templates select="soap:Envelope/soap:Body/md1:getPropertiesResponse" mode="case" />
				</xsl:if>
				<xsl:if test="soap:Envelope/soap:Body/md1:getPropertiesResponse/md1:properties/md2:propertyId[@propertyDefinitionId='cmis:objectTypeId']/md2:value='cmis:function'">
					<!--Metadata elements mapping for functions (<fileplan>)-->
					<xsl:apply-templates select="soap:Envelope/soap:Body/md1:getPropertiesResponse" mode="function" />
				</xsl:if>
				<xsl:if test="soap:Envelope/soap:Body/md1:getPropertiesResponse/md1:properties/md2:propertyId[@propertyDefinitionId='cmis:objectTypeId']/md2:value='F:doccom:document'">
					<!--Metadata elements mapping for documents (<c level="item">)-->
					<xsl:apply-templates select="soap:Envelope/soap:Body/md1:getPropertiesResponse" mode="item" />
				</xsl:if>				
			</archdesc>
		</ead>
	</xsl:template>

	<!--A template for functions (<fileplan>)-->
	<xsl:template match="soap:Envelope/soap:Body/md1:getPropertiesResponse" mode="function">
		<dsc><!--Fileplan should be a part of some c-level. It shouldn't be a separate c-level as shown here!--> 
			<c> 
			<!--In order to produce valid XMLs a dummy <did> part will be added for this example.-->
				<did>
					<abstract></abstract>
				</did>	
				<fileplan>
					<xsl:attribute name="id">
						<xsl:value-of select="md1:properties/md2:propertyId[@propertyDefinitionId='cmis:objectId']/md2:value"/>
					</xsl:attribute>
					<xsl:attribute name="localtype">
						<xsl:value-of select="string('original')"/>
					</xsl:attribute>
					<head>
						<xsl:value-of select="string('Archival classification schema')"/>
					</head>
					<fileplan>
						<head>
							<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:functionTitle']/md2:value"/>
						</head>
						<list>
							<item/>
						</list>
					</fileplan>
				</fileplan>
			</c>
		</dsc>
	</xsl:template>

	<!--A template for series (c level='series')-->
	<xsl:template match="soap:Envelope/soap:Body/md1:getPropertiesResponse" mode="series">
		<dsc>
			<c> 
				<xsl:attribute name="level">
					<xsl:value-of select="string('series')"/>
					<!--First c-level is "series" as we don't have information about other types in this SOAP.-->
				</xsl:attribute>  
				<did>
					<unitid>
						<xsl:attribute name="localtype">
							<xsl:value-of select="string('original')"/>
							<!--Orignal identifier of the entity.-->
						</xsl:attribute>  
						<xsl:value-of select="md1:properties/md2:propertyId[@propertyDefinitionId='cmis:objectId']/md2:value"/>
					</unitid>
					<!--The identifying name or title of the entity.-->
					<unittitle>
						<!--Title of a series.-->
						<xsl:if test="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:seriesTitle']">
							<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:seriesTitle']/md2:value"/>
						</xsl:if>	
					</unittitle>
					<!--System set date and time when the entity was created. Can be represented as unitdatestructured as well.-->
					<xsl:if test="md1:properties/md2:propertyDateTime[@propertyDefinitionId='cmis:creationDate']/md2:value">
						<unitdate datechar="created">
							<xsl:attribute name="datechar">
								<xsl:value-of select="string('created')"/>
							</xsl:attribute>  
							<xsl:value-of select="md1:properties/md2:propertyDateTime[@propertyDefinitionId='cmis:creationDate']/md2:value"/>
						</unitdate>
					</xsl:if>	
				</did>
				<!--Access restrictions.-->
				<accessrestrict>
					<chronlist>
						<chronitem>
							<daterange>
								<fromdate>
									<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:seriesAccessRestrictionBeginDate']/md2:value"/>
								</fromdate>
								<todate>
									<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:seriesAccessRestrictionEndDate']/md2:value"/>
								</todate>
							</daterange>
							<event>
								<list>
									<item>
										<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:seriesAccessRestriction']/md2:value"/>
									</item>
									<item>
										<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:seriesAccessRestrictionEndDesc']/md2:value"/>
									</item>
									<item>
										<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:seriesAccessRestrictionReason']/md2:value"/>
									</item>
								</list>
							</event>
						</chronitem>
					</chronlist>
				</accessrestrict>
				<!--Other Descriptive Data should be recorded as <odd> elements.-->         
			</c>    
		</dsc>
	</xsl:template>

	<!--A template for volumes and cases (c level='file')-->
	<xsl:template match="soap:Envelope/soap:Body/md1:getPropertiesResponse" mode="case">
		<dsc>
			<c> 
				<xsl:attribute name="level">
					<xsl:value-of select="string('file')"/>
					<!--First c-level is "file" as we don't have information about other types in this SOAP.-->
				</xsl:attribute>  
				<did>
					<unitid>
						<xsl:attribute name="localtype">
							<xsl:value-of select="string('original')"/>
							<!--Orignal identifier of the entity.-->
						</xsl:attribute>  
						<xsl:value-of select="md1:properties/md2:propertyId[@propertyDefinitionId='cmis:objectId']/md2:value"/>
					</unitid>
					<!--The identifying name or title of the entity.-->
					<unittitle>
						<!--Title of a file.-->
						<xsl:if test="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:volumeTitle']">
							<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:volumeTitle']/md2:value"/>
						</xsl:if>	
					</unittitle>
					<!--System set date and time when the entity was created. Can be represented as unitdatestructured as well.-->
					<xsl:if test="md1:properties/md2:propertyDateTime[@propertyDefinitionId='cmis:creationDate']/md2:value">
						<unitdate datechar="created">
							<xsl:attribute name="datechar">
								<xsl:value-of select="string('created')"/>
							</xsl:attribute>  
							<xsl:value-of select="md1:properties/md2:propertyDateTime[@propertyDefinitionId='cmis:creationDate']/md2:value"/>
						</unitdate>
					</xsl:if>	
				</did>
				<!--Access restrictions.-->
				<accessrestrict>
					<chronlist>
						<chronitem>
							<daterange>
								<fromdate>
									<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:volumeAccessRestrictionBeginDate']/md2:value"/>
								</fromdate>
								<todate>
									<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:volumeAccessRestrictionEndDate']/md2:value"/>
								</todate>
							</daterange>
							<event>
								<list>
									<item>
										<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:volumeAccessRestriction']/md2:value"/>
									</item>
									<item>
										<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:volumeAccessRestrictionEndDesc']/md2:value"/>
									</item>
									<item>
										<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:volumeAccessRestrictionReason']/md2:value"/>
									</item>
								</list>
							</event>
						</chronitem>
					</chronlist>
				</accessrestrict>
				<!--Other Descriptive Data should be recorded as <odd> elements.-->         
			</c>    
		</dsc>
	</xsl:template>

	<!--A template for documents (c level='item')-->
	<xsl:template match="soap:Envelope/soap:Body/md1:getPropertiesResponse" mode="item">
		<dsc>
			<c> 
				<xsl:attribute name="level">
					<xsl:value-of select="string('item')"/>
					<!--First c-level is "item" as we don't have information about aggregations in this SOAP.-->
				</xsl:attribute>  
				<did>
					<unitid>
						<xsl:attribute name="localtype">
							<xsl:value-of select="string('original')"/>
							<!--Orignal identifier of the entity.-->
						</xsl:attribute>  
						<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:name']/md2:value"/>
					</unitid>
					<!--The identifying name or title of the entity.-->
					<unittitle>
						<xsl:choose>
							<!--The names of elements can vary accross document types.-->
							<!--NB! At the moment the elements are one and the same.-->
							<xsl:when test="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocObjectTypeId']/md2:value='incomingLetter'">
								<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocName']/md2:value"/>
							</xsl:when>

							<xsl:when test="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocObjectTypeId']/md2:value='outgoingLetter'">
								<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocName']/md2:value"/>
							</xsl:when>

							<xsl:when test="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocObjectTypeId']/md2:value='decree'">
								<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocName']/md2:value"/>
							</xsl:when>

							<xsl:when test="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocObjectTypeId']/md2:value='generalOrder'">
								<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocName']/md2:value"/>
							</xsl:when>

							<xsl:when test="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocObjectTypeId']/md2:value='managementsOrder'">
								<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocName']/md2:value"/>
							</xsl:when>

							<xsl:when test="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocObjectTypeId']/md2:value='minutes'">
								<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocName']/md2:value"/>
							</xsl:when>

							<xsl:when test="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocObjectTypeId']/md2:value='contract'">
								<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocName']/md2:value"/>
							</xsl:when>

							<xsl:when test="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocObjectTypeId']/md2:value='instrumentOfDeliveryAndReceipt'">
								<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocName']/md2:value"/>
							</xsl:when>

							<xsl:otherwise>
								<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocName']/md2:value"/>
							</xsl:otherwise>
						</xsl:choose>
					</unittitle>
					<!--System set date and time when the entity was created. Can be represented as unitdatestructured as well.-->
					<unitdate datechar="created">
						<xsl:attribute name="datechar">
							<xsl:value-of select="string('created')"/>
						</xsl:attribute>  
						<xsl:value-of select="md1:properties/md2:propertyDateTime[@propertyDefinitionId='docdyn:regDateTime']/md2:value"/>
					</unitdate>

					<!--A place for computer files-->
					<!--daoset label="Digital Objects">
									<dao id="e7d46528-9e30-44da-9dde-0ee1d45ed9c1" daotype="borndigital" linktitle="plan.jpg" href="file:../../representations/rep1/data/plan.jpg" />
									<dao id="e7a128b4-800d-4484-ae8b-a3c767bcd339" daotype="derived" linktitle="plan.png" href="file:../../representations/rep2/data/plan.png" />
								</daoset-->  		
					<!--In case there are only one representation then the daoset element should be skipped.-->
					<!--dao id="ea9cf444-6052-416e-86f3-1adca09eeff6" daotype="borndigital" linktitle="prt02.pdf" href="file:../../representations/rep1/data/prt02.pdf" /-->		

				</did>
				<!--Access restrictions.-->
				<accessrestrict>
					<chronlist>
						<chronitem>
							<daterange>
								<fromdate>
									<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocAccessRestrictionBeginDate']/md2:value"/>
								</fromdate>
								<todate>
									<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocAccessRestrictionEndDate']/md2:value"/>
									<!--Some SOAP examples also contain <ns2:propertyDateTime propertyDefinitionId="docdyn:accessRestrictionEndDate next to cmis:deltaDocAccessRestrictionEndDate."/>-->
								</todate>
							</daterange>
							<event>
								<list>
									<item>
										<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocAccessRestriction']/md2:value"/>
									</item>
									<item>
										<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocAccessRestrictionEndDesc']/md2:value"/>
									</item>
									<item>
										<xsl:value-of select="md1:properties/md2:propertyString[@propertyDefinitionId='cmis:deltaDocAccessRestrictionReason']/md2:value"/>
									</item>
									<!--item><xsl:value-of select="normalize-space(soap:Envelope/soap:Body/md1:getPropertiesResponse/md2:object/md2:properties/md2:propertyString[@md2:propertyDefinitionId='accessRestrictionDescription']/md2:value)"/></item-->
								</list>
							</event>
						</chronitem>
					</chronlist>
				</accessrestrict>
				<!--Other Descriptive Data should be recorded as <odd> elements.-->         
			</c>    
		</dsc>
	</xsl:template>
</xsl:stylesheet>