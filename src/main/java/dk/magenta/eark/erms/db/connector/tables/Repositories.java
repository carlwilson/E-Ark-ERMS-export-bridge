/**
 * This class is generated by jOOQ
 */
package dk.magenta.eark.erms.db.connector.tables;


import dk.magenta.eark.erms.db.connector.Exm;
import dk.magenta.eark.erms.db.connector.Keys;
import dk.magenta.eark.erms.db.connector.tables.records.RepositoriesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Repositories extends TableImpl<RepositoriesRecord> {

    private static final long serialVersionUID = -1831492891;

    /**
     * The reference instance of <code>exm.repositories</code>
     */
    public static final Repositories REPOSITORIES = new Repositories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RepositoriesRecord> getRecordType() {
        return RepositoriesRecord.class;
    }

    /**
     * The column <code>exm.repositories.id</code>.
     */
    public final TableField<RepositoriesRecord, UInteger> ID = createField("id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>exm.repositories.url</code>.
     */
    public final TableField<RepositoriesRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>exm.repositories</code> table reference
     */
    public Repositories() {
        this("repositories", null);
    }

    /**
     * Create an aliased <code>exm.repositories</code> table reference
     */
    public Repositories(String alias) {
        this(alias, REPOSITORIES);
    }

    private Repositories(String alias, Table<RepositoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Repositories(String alias, Table<RepositoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Exm.EXM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RepositoriesRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_REPOSITORIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RepositoriesRecord> getPrimaryKey() {
        return Keys.KEY_REPOSITORIES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RepositoriesRecord>> getKeys() {
        return Arrays.<UniqueKey<RepositoriesRecord>>asList(Keys.KEY_REPOSITORIES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Repositories as(String alias) {
        return new Repositories(alias, this);
    }

    /**
     * Rename this table
     */
    public Repositories rename(String name) {
        return new Repositories(name, null);
    }
}
